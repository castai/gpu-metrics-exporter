// Code generated by mockery v2.42.0. DO NOT EDIT.

package exporter

import (
	context "context"

	exporter "github.com/castai/gpu-metrics-exporter/internal/exporter"
	mock "github.com/stretchr/testify/mock"
)

// MockScraper is an autogenerated mock type for the Scraper type
type MockScraper struct {
	mock.Mock
}

type MockScraper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScraper) EXPECT() *MockScraper_Expecter {
	return &MockScraper_Expecter{mock: &_m.Mock}
}

// Scrape provides a mock function with given fields: ctx, urls
func (_m *MockScraper) Scrape(ctx context.Context, urls []string) ([]exporter.MetricFamiliyMap, error) {
	ret := _m.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for Scrape")
	}

	var r0 []exporter.MetricFamiliyMap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]exporter.MetricFamiliyMap, error)); ok {
		return rf(ctx, urls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []exporter.MetricFamiliyMap); ok {
		r0 = rf(ctx, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exporter.MetricFamiliyMap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScraper_Scrape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scrape'
type MockScraper_Scrape_Call struct {
	*mock.Call
}

// Scrape is a helper method to define mock.On call
//   - ctx context.Context
//   - urls []string
func (_e *MockScraper_Expecter) Scrape(ctx interface{}, urls interface{}) *MockScraper_Scrape_Call {
	return &MockScraper_Scrape_Call{Call: _e.mock.On("Scrape", ctx, urls)}
}

func (_c *MockScraper_Scrape_Call) Run(run func(ctx context.Context, urls []string)) *MockScraper_Scrape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockScraper_Scrape_Call) Return(_a0 []exporter.MetricFamiliyMap, _a1 error) *MockScraper_Scrape_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScraper_Scrape_Call) RunAndReturn(run func(context.Context, []string) ([]exporter.MetricFamiliyMap, error)) *MockScraper_Scrape_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScraper creates a new instance of MockScraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScraper {
	mock := &MockScraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
